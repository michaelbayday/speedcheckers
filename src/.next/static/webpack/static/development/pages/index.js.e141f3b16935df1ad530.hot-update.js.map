{"version":3,"file":"static/webpack/static/development/pages/index.js.e141f3b16935df1ad530.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Row from \"../components/Row\";\n\nconst App = () => {\n  const [rowNums, setRowNum] = useState(8);\n  const [inputRows, setInput] = useState(8);\n  const [board, setBoard] = useState([]);\n  const [circle, setShape] = useState(true);\n  const [topColorRed, setTopColor] = useState(true);\n  const [selectedPiece, setSelectedPiece] = useState([]);\n  const [potentialMoves, setPotentialMoves] = useState([]);\n  const [currentPlayer, setPlayer] = useState(\"t\");\n  const [resetGame, setReset] = useState(false);\n  useEffect(() => {\n    const savedGame = JSON.parse(localStorage.getItem(\"board\"));\n    if (!savedGame) {\n      setBoard(() => {\n        const newBoard = [];\n        for (let i = 0; i < rowNums; i++) {\n          newBoard.push([]);\n          for (let j = 0; j < rowNums; j++) {\n            if (i <= 1) {\n              newBoard[i].push(\"t\");\n            } else if (i >= rowNums - 2) {\n              newBoard[i].push(\"b\");\n            } else {\n              newBoard[i].push(\"o\");\n            }\n          }\n        }\n        return newBoard;\n      });\n      setBoard(savedGame);\n    }\n  }, [rowNums, resetGame]);\n\n  const saveGame = () => {\n    localStorage.setItem(\"board\", JSON.stringify(board));\n  };\n  return (\n    <div className=\"main\">\n      <div>\n        <h3>Number of Board Rows</h3>\n        <input\n          type=\"number\"\n          value={inputRows}\n          onChange={(e) => {\n            setInput(e.target.value);\n          }}\n        />\n        <button\n          onClick={() => {\n            setRowNum(inputRows);\n          }}\n        >\n          Submit\n        </button>\n      </div>\n      <div className=\"toggles\">\n        <div className=\"shape-toggle\">\n          <h3>Select your shape</h3>\n          <div className=\"toggles\">\n            <input\n              type=\"radio\"\n              name=\"shape\"\n              value={true}\n              onChange={() => {\n                setShape(true);\n              }}\n              defaultChecked\n            />\n            <label htmlFor=\"circle\">Circle</label>\n            <input\n              type=\"radio\"\n              name=\"shape\"\n              value={false}\n              onChange={() => {\n                setShape(false);\n              }}\n            />\n            <label htmlFor=\"square\">Square</label>\n          </div>\n        </div>\n        <div className=\"color-toggles\">\n          <h3>Choose the top player's color</h3>\n          <div className=\"toggles\">\n            <input\n              type=\"radio\"\n              name=\"color\"\n              value={true}\n              onChange={() => {\n                setTopColor(true);\n              }}\n              defaultChecked\n            />\n            <label htmlFor=\"circle\">Red</label>\n            <input\n              type=\"radio\"\n              name=\"color\"\n              value={false}\n              onChange={() => {\n                setTopColor(false);\n              }}\n            />\n            <label htmlFor=\"square\">Black</label>\n          </div>\n        </div>\n      </div>\n      {board.map((el, rowNum) => (\n        <Row\n          key={rowNum}\n          rowData={el}\n          rowNum={rowNum}\n          circle={circle}\n          topColorRed={topColorRed}\n          selectedPiece={selectedPiece}\n          setSelectedPiece={setSelectedPiece}\n          potentialMoves={potentialMoves}\n          setPotentialMoves={setPotentialMoves}\n          board={board}\n          currentPlayer={currentPlayer}\n          setPlayer={setPlayer}\n          setBoard={setBoard}\n        />\n      ))}\n      <div className=\"game-management\">\n        <h3>Game management</h3>\n        <button onClick={saveGame}>Save Game</button>\n        <button\n          onClick={() => {\n            localStorage.removeItem(\"board\");\n            setReset(!resetGame);\n          }}\n        >\n          Reset Game\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AASA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;A","sourceRoot":""}